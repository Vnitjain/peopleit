@page "/leads"

@using Microsoft.EntityFrameworkCore
@using PeopleIT.Data
@using PeopleIT.Data.Models
@inject PeopleITDBContext _context
@rendermode InteractiveServer

<PageTitle>Leads</PageTitle>

<h1>New Leads</h1>
<MudGrid>
    <MudItem>
        <MudFileUpload T="IBrowserFile" Accept=".xlsx" FilesChanged="AddFile" MaximumFileCount="5">
            <ActivatorContent>
                <MudButton Variant="Variant.Filled" Color="Color.Primary"
                    StartIcon="@Icons.Material.Filled.CloudUpload">
                    Upload Excel files
                </MudButton>
            </ActivatorContent>
        </MudFileUpload>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" StartIcon="@Icons.Material.Filled.Delete" Color="Color.Error"
            OnClick="ClearFiles">Clear</MudButton>
    </MudItem>
    <MudItem>
        <MudButton Variant="Variant.Filled" EndIcon="@Icons.Material.Filled.Send" Color="Color.Primary">Submit
        </MudButton>
    </MudItem>
</MudGrid>
@if (files != null)
{
    <MudList T="string">
        @foreach (var file in files)
        {
            <MudListItem Icon="@Icons.Material.Filled.AttachFile">
                @file.Name <code>@(file.Size / 1000) kb</code>
            </MudListItem>
        }
    </MudList>
}
else
{
    <MudText Color="Color.Warning">Select files.</MudText>
}

@* <LeadsTable Leads="leads" /> *@
<LeadsTable Leads="newLeadsToAdd"/>

@code {
    IList<IBrowserFile> files = new List<IBrowserFile>();
    List<Lead> leads = new List<Lead>();
    List<Lead> dbleads = new List<Lead>();
    List<Lead> newLeadsToAdd = new List<Lead>();
    private async void AddFile(IBrowserFile file)
    {
        files.Add(file);

        using var stream = file.OpenReadStream(10 * 1024 * 1024);
        using var memStream = new MemoryStream();
        await stream.CopyToAsync(memStream);
        memStream.Position = 0;

        using var workbook = new ClosedXML.Excel.XLWorkbook(memStream);
        var worksheet = workbook.Worksheets.First();

        leads.Clear();

        foreach (var row in worksheet.RowsUsed().Skip(1))
        {
            var quoteSentDate = DateTime.Parse(row.Cell(1).GetString());
            var salesPerson = row.Cell(2).GetString();
            var projectName = row.Cell(3).GetString();
            var projectCode = row.Cell(4).GetString();
            var customer = row.Cell(5).GetString();
            var customerCity = row.Cell(6).GetString();
            var customerState = row.Cell(7).GetString();
            var marketingCategory = row.Cell(8).GetString();
            var noOfQuotes = Int32.Parse(row.Cell(9).GetString());
            var totalNet = Double.Parse(row.Cell(10).GetString());

            leads.Add(new Lead(quoteSentDate, salesPerson, projectCode, projectCode, customer, customerCity,
            customerState, marketingCategory, noOfQuotes, totalNet));
        }

        await LoadLeadsFromDatabase();
        CompareAndFindNewLeads();

        StateHasChanged();
    }
    private async Task LoadLeadsFromDatabase()
    {
        dbleads.Clear();
        StateHasChanged();

        try
        {
            dbleads = await _context.Leads.OrderByDescending(l => l.QuoteSentDate).ToListAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading leads from database: {ex.Message}");
        }
        finally
        {
            StateHasChanged();
        }
    }
    private void CompareAndFindNewLeads()
    {
        newLeadsToAdd.Clear();

        foreach (var excelLead in leads)
        {
            if (!dbleads.Any(dbLead => dbLead.Equals(excelLead)))
            {
                newLeadsToAdd.Add(excelLead);
            }
        }

        Console.WriteLine($"{newLeadsToAdd.Count} new leads found.");
    }
    private void ClearFiles()
    {
        files.Clear();
        leads.Clear();
        newLeadsToAdd.Clear();
        StateHasChanged();
    }
}
